name: Test_BuildWithCustomArtifacts

on:
  pull_request:
    branches:
      - 'main'

jobs:
  
  SetupBuildInfo:
    runs-on: ubuntu-latest
    outputs:
      build-id: ${{ steps.SetupBuildInfo.outputs.build-id }}
      build-version: ${{ steps.SetupBuildInfo.outputs.build-version }}
      build-timestamp: ${{ steps.SetupBuildInfo.outputs.build-timestamp }}
    steps:
      
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      
      - name: SetupBuildInfo
        id: SetupBuildInfo
        run: dotnet run --project _atom/_atom.csproj SetupBuildInfo --skip --headless
        env:
          nuget-dry-run: true
  
  PackAtom:
    needs: [ SetupBuildInfo ]
    runs-on: ubuntu-latest
    steps:
      
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      
      - name: PackAtom
        id: PackAtom
        run: dotnet run --project _atom/_atom.csproj PackAtom --skip --headless
        env:
          nuget-dry-run: true
      
      - name: StoreArtifact
        run: dotnet run --project _atom/_atom.csproj StoreArtifact --skip --headless
        env:
          build-id: ${{ needs.SetupBuildInfo.outputs.build-id }}
          azure-vault-app-secret: ${{ secrets.AZURE_VAULT_APP_SECRET }}
          azure-vault-address: ${{ vars.AZURE_VAULT_ADDRESS }}
          azure-vault-tenant-id: ${{ vars.AZURE_VAULT_TENANT_ID }}
          azure-vault-app-id: ${{ vars.AZURE_VAULT_APP_ID }}
          nuget-dry-run: true
          atom-artifacts: DecSm.Atom
  
  PackAtomTool:
    needs: [ SetupBuildInfo ]
    runs-on: ubuntu-latest
    steps:
      
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      
      - name: PackAtomTool
        id: PackAtomTool
        run: dotnet run --project _atom/_atom.csproj PackAtomTool --skip --headless
        env:
          nuget-dry-run: true
      
      - name: StoreArtifact
        run: dotnet run --project _atom/_atom.csproj StoreArtifact --skip --headless
        env:
          build-id: ${{ needs.SetupBuildInfo.outputs.build-id }}
          azure-vault-app-secret: ${{ secrets.AZURE_VAULT_APP_SECRET }}
          azure-vault-address: ${{ vars.AZURE_VAULT_ADDRESS }}
          azure-vault-tenant-id: ${{ vars.AZURE_VAULT_TENANT_ID }}
          azure-vault-app-id: ${{ vars.AZURE_VAULT_APP_ID }}
          nuget-dry-run: true
          atom-artifacts: DecSm.Atom.Tool
  
  PackAzureKeyVaultModule:
    needs: [ SetupBuildInfo ]
    runs-on: ubuntu-latest
    steps:
      
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      
      - name: PackAzureKeyVaultModule
        id: PackAzureKeyVaultModule
        run: dotnet run --project _atom/_atom.csproj PackAzureKeyVaultModule --skip --headless
        env:
          nuget-dry-run: true
      
      - name: StoreArtifact
        run: dotnet run --project _atom/_atom.csproj StoreArtifact --skip --headless
        env:
          build-id: ${{ needs.SetupBuildInfo.outputs.build-id }}
          azure-vault-app-secret: ${{ secrets.AZURE_VAULT_APP_SECRET }}
          azure-vault-address: ${{ vars.AZURE_VAULT_ADDRESS }}
          azure-vault-tenant-id: ${{ vars.AZURE_VAULT_TENANT_ID }}
          azure-vault-app-id: ${{ vars.AZURE_VAULT_APP_ID }}
          nuget-dry-run: true
          atom-artifacts: DecSm.Atom.Module.AzureKeyVault
  
  PackAzureStorageModule:
    needs: [ SetupBuildInfo ]
    runs-on: ubuntu-latest
    steps:
      
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      
      - name: PackAzureStorageModule
        id: PackAzureStorageModule
        run: dotnet run --project _atom/_atom.csproj PackAzureStorageModule --skip --headless
        env:
          nuget-dry-run: true
      
      - name: StoreArtifact
        run: dotnet run --project _atom/_atom.csproj StoreArtifact --skip --headless
        env:
          build-id: ${{ needs.SetupBuildInfo.outputs.build-id }}
          azure-vault-app-secret: ${{ secrets.AZURE_VAULT_APP_SECRET }}
          azure-vault-address: ${{ vars.AZURE_VAULT_ADDRESS }}
          azure-vault-tenant-id: ${{ vars.AZURE_VAULT_TENANT_ID }}
          azure-vault-app-id: ${{ vars.AZURE_VAULT_APP_ID }}
          nuget-dry-run: true
          atom-artifacts: DecSm.Atom.Module.AzureStorage
  
  PackDevopsWorkflowsModule:
    needs: [ SetupBuildInfo ]
    runs-on: ubuntu-latest
    steps:
      
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      
      - name: PackDevopsWorkflowsModule
        id: PackDevopsWorkflowsModule
        run: dotnet run --project _atom/_atom.csproj PackDevopsWorkflowsModule --skip --headless
        env:
          nuget-dry-run: true
      
      - name: StoreArtifact
        run: dotnet run --project _atom/_atom.csproj StoreArtifact --skip --headless
        env:
          build-id: ${{ needs.SetupBuildInfo.outputs.build-id }}
          azure-vault-app-secret: ${{ secrets.AZURE_VAULT_APP_SECRET }}
          azure-vault-address: ${{ vars.AZURE_VAULT_ADDRESS }}
          azure-vault-tenant-id: ${{ vars.AZURE_VAULT_TENANT_ID }}
          azure-vault-app-id: ${{ vars.AZURE_VAULT_APP_ID }}
          nuget-dry-run: true
          atom-artifacts: DecSm.Atom.Module.DevopsWorkflows
  
  PackDotnetModule:
    needs: [ SetupBuildInfo ]
    runs-on: ubuntu-latest
    steps:
      
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      
      - name: PackDotnetModule
        id: PackDotnetModule
        run: dotnet run --project _atom/_atom.csproj PackDotnetModule --skip --headless
        env:
          nuget-dry-run: true
      
      - name: StoreArtifact
        run: dotnet run --project _atom/_atom.csproj StoreArtifact --skip --headless
        env:
          build-id: ${{ needs.SetupBuildInfo.outputs.build-id }}
          azure-vault-app-secret: ${{ secrets.AZURE_VAULT_APP_SECRET }}
          azure-vault-address: ${{ vars.AZURE_VAULT_ADDRESS }}
          azure-vault-tenant-id: ${{ vars.AZURE_VAULT_TENANT_ID }}
          azure-vault-app-id: ${{ vars.AZURE_VAULT_APP_ID }}
          nuget-dry-run: true
          atom-artifacts: DecSm.Atom.Module.Dotnet
  
  PackGithubWorkflowsModule:
    needs: [ SetupBuildInfo ]
    runs-on: ubuntu-latest
    steps:
      
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      
      - name: PackGithubWorkflowsModule
        id: PackGithubWorkflowsModule
        run: dotnet run --project _atom/_atom.csproj PackGithubWorkflowsModule --skip --headless
        env:
          nuget-dry-run: true
      
      - name: StoreArtifact
        run: dotnet run --project _atom/_atom.csproj StoreArtifact --skip --headless
        env:
          build-id: ${{ needs.SetupBuildInfo.outputs.build-id }}
          azure-vault-app-secret: ${{ secrets.AZURE_VAULT_APP_SECRET }}
          azure-vault-address: ${{ vars.AZURE_VAULT_ADDRESS }}
          azure-vault-tenant-id: ${{ vars.AZURE_VAULT_TENANT_ID }}
          azure-vault-app-id: ${{ vars.AZURE_VAULT_APP_ID }}
          nuget-dry-run: true
          atom-artifacts: DecSm.Atom.Module.GithubWorkflows
  
  PackGitVersionModule:
    needs: [ SetupBuildInfo ]
    runs-on: ubuntu-latest
    steps:
      
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      
      - name: PackGitVersionModule
        id: PackGitVersionModule
        run: dotnet run --project _atom/_atom.csproj PackGitVersionModule --skip --headless
        env:
          nuget-dry-run: true
      
      - name: StoreArtifact
        run: dotnet run --project _atom/_atom.csproj StoreArtifact --skip --headless
        env:
          build-id: ${{ needs.SetupBuildInfo.outputs.build-id }}
          azure-vault-app-secret: ${{ secrets.AZURE_VAULT_APP_SECRET }}
          azure-vault-address: ${{ vars.AZURE_VAULT_ADDRESS }}
          azure-vault-tenant-id: ${{ vars.AZURE_VAULT_TENANT_ID }}
          azure-vault-app-id: ${{ vars.AZURE_VAULT_APP_ID }}
          nuget-dry-run: true
          atom-artifacts: DecSm.Atom.Module.GitVersion
  
  TestAtom:
    needs: [ SetupBuildInfo ]
    strategy:
      matrix:
        job-runs-on: [ windows-latest, ubuntu-latest, macos-latest ]
    runs-on: ${{ matrix.job-runs-on }}
    steps:
      
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      
      - name: TestAtom
        id: TestAtom
        run: dotnet run --project _atom/_atom.csproj TestAtom --skip --headless
        env:
          nuget-dry-run: true
          job-runs-on: ${{ matrix.job-runs-on }}
          build-slice: ${{ matrix.job-runs-on }}
      
      - name: StoreArtifact
        run: dotnet run --project _atom/_atom.csproj StoreArtifact --skip --headless
        env:
          build-id: ${{ needs.SetupBuildInfo.outputs.build-id }}
          azure-vault-app-secret: ${{ secrets.AZURE_VAULT_APP_SECRET }}
          azure-vault-address: ${{ vars.AZURE_VAULT_ADDRESS }}
          azure-vault-tenant-id: ${{ vars.AZURE_VAULT_TENANT_ID }}
          azure-vault-app-id: ${{ vars.AZURE_VAULT_APP_ID }}
          nuget-dry-run: true
          atom-artifacts: DecSm.Atom.Tests,DecSm.Atom.SourceGenerators.Tests,DecSm.Atom.Module.GithubWorkflows.Tests
          build-slice: ${{ matrix.job-runs-on }}
  
  PushToNuget:
    needs: [ PackAtom, PackAtomTool, PackAzureKeyVaultModule, PackAzureStorageModule, PackDevopsWorkflowsModule, PackDotnetModule, PackGithubWorkflowsModule, PackGitVersionModule, SetupBuildInfo ]
    runs-on: ubuntu-latest
    steps:
      
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      
      - name: RetrieveArtifact
        run: dotnet run --project _atom/_atom.csproj RetrieveArtifact --skip --headless
        env:
          build-id: ${{ needs.SetupBuildInfo.outputs.build-id }}
          azure-vault-app-secret: ${{ secrets.AZURE_VAULT_APP_SECRET }}
          azure-vault-address: ${{ vars.AZURE_VAULT_ADDRESS }}
          azure-vault-tenant-id: ${{ vars.AZURE_VAULT_TENANT_ID }}
          azure-vault-app-id: ${{ vars.AZURE_VAULT_APP_ID }}
          nuget-dry-run: true
          atom-artifacts: DecSm.Atom,DecSm.Atom.Tool,DecSm.Atom.Module.AzureKeyVault,DecSm.Atom.Module.AzureStorage,DecSm.Atom.Module.DevopsWorkflows,DecSm.Atom.Module.Dotnet,DecSm.Atom.Module.GithubWorkflows,DecSm.Atom.Module.GitVersion
      
      - name: PushToNuget
        id: PushToNuget
        run: dotnet run --project _atom/_atom.csproj PushToNuget --skip --headless
        env:
          azure-vault-app-secret: ${{ secrets.AZURE_VAULT_APP_SECRET }}
          azure-vault-address: ${{ vars.AZURE_VAULT_ADDRESS }}
          azure-vault-tenant-id: ${{ vars.AZURE_VAULT_TENANT_ID }}
          azure-vault-app-id: ${{ vars.AZURE_VAULT_APP_ID }}
          nuget-dry-run: true
