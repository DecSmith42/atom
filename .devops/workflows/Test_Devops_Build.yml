name: Test_Devops_Build

variables:
  - group: Atom
trigger: none

jobs:
  
  - job: SetupBuildInfo
    pool:
      vmImage: ubuntu-latest
    steps:
      
      - checkout: self
        fetchDepth: 0
      
      - task: UseDotNet@2
        inputs:
          version: '9.0.x'

      - script: dotnet run --project _atom/_atom.csproj SetupBuildInfo --skip --headless
        name: SetupBuildInfo
        env:
          nuget-dry-run: true
  
  - job: PackAtom
    pool:
      vmImage: ubuntu-latest
    steps:
      
      - checkout: self
        fetchDepth: 0
      
      - task: UseDotNet@2
        inputs:
          version: '9.0.x'

      - script: dotnet run --project _atom/_atom.csproj PackAtom --skip --headless
        name: PackAtom
        env:
          nuget-dry-run: true
      
      - task: PublishPipelineArtifact@1
        displayName: DecSm.Atom
        inputs:
          artifactName: DecSm.Atom
          targetPath: "$(Build.BinariesDirectory)/DecSm.Atom"
      
  
  - job: PackAtomTool
    pool:
      vmImage: ubuntu-latest
    steps:
      
      - checkout: self
        fetchDepth: 0
      
      - task: UseDotNet@2
        inputs:
          version: '9.0.x'

      - script: dotnet run --project _atom/_atom.csproj PackAtomTool --skip --headless
        name: PackAtomTool
        env:
          nuget-dry-run: true
      
      - task: PublishPipelineArtifact@1
        displayName: DecSm.Atom.Tool
        inputs:
          artifactName: DecSm.Atom.Tool
          targetPath: "$(Build.BinariesDirectory)/DecSm.Atom.Tool"
      
  
  - job: PackAzureKeyVaultModule
    pool:
      vmImage: ubuntu-latest
    steps:
      
      - checkout: self
        fetchDepth: 0
      
      - task: UseDotNet@2
        inputs:
          version: '9.0.x'

      - script: dotnet run --project _atom/_atom.csproj PackAzureKeyVaultModule --skip --headless
        name: PackAzureKeyVaultModule
        env:
          nuget-dry-run: true
      
      - task: PublishPipelineArtifact@1
        displayName: DecSm.Atom.Module.AzureKeyVault
        inputs:
          artifactName: DecSm.Atom.Module.AzureKeyVault
          targetPath: "$(Build.BinariesDirectory)/DecSm.Atom.Module.AzureKeyVault"
      
  
  - job: PackAzureStorageModule
    pool:
      vmImage: ubuntu-latest
    steps:
      
      - checkout: self
        fetchDepth: 0
      
      - task: UseDotNet@2
        inputs:
          version: '9.0.x'

      - script: dotnet run --project _atom/_atom.csproj PackAzureStorageModule --skip --headless
        name: PackAzureStorageModule
        env:
          nuget-dry-run: true
      
      - task: PublishPipelineArtifact@1
        displayName: DecSm.Atom.Module.AzureStorage
        inputs:
          artifactName: DecSm.Atom.Module.AzureStorage
          targetPath: "$(Build.BinariesDirectory)/DecSm.Atom.Module.AzureStorage"
      
  
  - job: PackDevopsWorkflowsModule
    pool:
      vmImage: ubuntu-latest
    steps:
      
      - checkout: self
        fetchDepth: 0
      
      - task: UseDotNet@2
        inputs:
          version: '9.0.x'

      - script: dotnet run --project _atom/_atom.csproj PackDevopsWorkflowsModule --skip --headless
        name: PackDevopsWorkflowsModule
        env:
          nuget-dry-run: true
      
      - task: PublishPipelineArtifact@1
        displayName: DecSm.Atom.Module.DevopsWorkflows
        inputs:
          artifactName: DecSm.Atom.Module.DevopsWorkflows
          targetPath: "$(Build.BinariesDirectory)/DecSm.Atom.Module.DevopsWorkflows"
      
  
  - job: PackDotnetModule
    pool:
      vmImage: ubuntu-latest
    steps:
      
      - checkout: self
        fetchDepth: 0
      
      - task: UseDotNet@2
        inputs:
          version: '9.0.x'

      - script: dotnet run --project _atom/_atom.csproj PackDotnetModule --skip --headless
        name: PackDotnetModule
        env:
          nuget-dry-run: true
      
      - task: PublishPipelineArtifact@1
        displayName: DecSm.Atom.Module.Dotnet
        inputs:
          artifactName: DecSm.Atom.Module.Dotnet
          targetPath: "$(Build.BinariesDirectory)/DecSm.Atom.Module.Dotnet"
      
  
  - job: PackGithubWorkflowsModule
    pool:
      vmImage: ubuntu-latest
    steps:
      
      - checkout: self
        fetchDepth: 0
      
      - task: UseDotNet@2
        inputs:
          version: '9.0.x'

      - script: dotnet run --project _atom/_atom.csproj PackGithubWorkflowsModule --skip --headless
        name: PackGithubWorkflowsModule
        env:
          nuget-dry-run: true
      
      - task: PublishPipelineArtifact@1
        displayName: DecSm.Atom.Module.GithubWorkflows
        inputs:
          artifactName: DecSm.Atom.Module.GithubWorkflows
          targetPath: "$(Build.BinariesDirectory)/DecSm.Atom.Module.GithubWorkflows"
      
  
  - job: PackGitVersionModule
    pool:
      vmImage: ubuntu-latest
    steps:
      
      - checkout: self
        fetchDepth: 0
      
      - task: UseDotNet@2
        inputs:
          version: '9.0.x'

      - script: dotnet run --project _atom/_atom.csproj PackGitVersionModule --skip --headless
        name: PackGitVersionModule
        env:
          nuget-dry-run: true
      
      - task: PublishPipelineArtifact@1
        displayName: DecSm.Atom.Module.GitVersion
        inputs:
          artifactName: DecSm.Atom.Module.GitVersion
          targetPath: "$(Build.BinariesDirectory)/DecSm.Atom.Module.GitVersion"
      
  
  - job: TestAtom
    strategy:
      matrix:
        001_windows-latest:
          job-runs-on: 'windows-latest'
        002_ubuntu-latest:
          job-runs-on: 'ubuntu-latest'
        003_macos-latest:
          job-runs-on: 'macos-latest'
    pool:
      vmImage: $(job-runs-on)
    steps:
      
      - checkout: self
        fetchDepth: 0
      
      - task: UseDotNet@2
        inputs:
          version: '9.0.x'

      - script: dotnet run --project _atom/_atom.csproj TestAtom --skip --headless
        name: TestAtom
        env:
          nuget-dry-run: true
          job-runs-on: $(job-runs-on)
          build-slice: $(job-runs-on)
      
      - task: PublishPipelineArtifact@1
        displayName: DecSm.Atom.Tests-$(job-runs-on)
        inputs:
          artifactName: DecSm.Atom.Tests-$(job-runs-on)
          targetPath: "$(Build.BinariesDirectory)/DecSm.Atom.Tests"
      
      - task: PublishPipelineArtifact@1
        displayName: DecSm.Atom.SourceGenerators.Tests-$(job-runs-on)
        inputs:
          artifactName: DecSm.Atom.SourceGenerators.Tests-$(job-runs-on)
          targetPath: "$(Build.BinariesDirectory)/DecSm.Atom.SourceGenerators.Tests"
      
      - task: PublishPipelineArtifact@1
        displayName: DecSm.Atom.Module.GithubWorkflows.Tests-$(job-runs-on)
        inputs:
          artifactName: DecSm.Atom.Module.GithubWorkflows.Tests-$(job-runs-on)
          targetPath: "$(Build.BinariesDirectory)/DecSm.Atom.Module.GithubWorkflows.Tests"
      
  
  - job: PushToNuget
    dependsOn: [ PackAtom, PackAtomTool, PackAzureKeyVaultModule, PackAzureStorageModule, PackDevopsWorkflowsModule, PackDotnetModule, PackGithubWorkflowsModule, PackGitVersionModule ]
    pool:
      vmImage: ubuntu-latest
    steps:
      
      - checkout: self
        fetchDepth: 0
      
      - task: UseDotNet@2
        inputs:
          version: '9.0.x'

      - task: DownloadPipelineArtifact@2
        displayName: DecSm.Atom
        inputs:
          artifact: DecSm.Atom
          path: "$(Build.ArtifactStagingDirectory)/DecSm.Atom"
      
      - task: DownloadPipelineArtifact@2
        displayName: DecSm.Atom.Tool
        inputs:
          artifact: DecSm.Atom.Tool
          path: "$(Build.ArtifactStagingDirectory)/DecSm.Atom.Tool"
      
      - task: DownloadPipelineArtifact@2
        displayName: DecSm.Atom.Module.AzureKeyVault
        inputs:
          artifact: DecSm.Atom.Module.AzureKeyVault
          path: "$(Build.ArtifactStagingDirectory)/DecSm.Atom.Module.AzureKeyVault"
      
      - task: DownloadPipelineArtifact@2
        displayName: DecSm.Atom.Module.AzureStorage
        inputs:
          artifact: DecSm.Atom.Module.AzureStorage
          path: "$(Build.ArtifactStagingDirectory)/DecSm.Atom.Module.AzureStorage"
      
      - task: DownloadPipelineArtifact@2
        displayName: DecSm.Atom.Module.DevopsWorkflows
        inputs:
          artifact: DecSm.Atom.Module.DevopsWorkflows
          path: "$(Build.ArtifactStagingDirectory)/DecSm.Atom.Module.DevopsWorkflows"
      
      - task: DownloadPipelineArtifact@2
        displayName: DecSm.Atom.Module.Dotnet
        inputs:
          artifact: DecSm.Atom.Module.Dotnet
          path: "$(Build.ArtifactStagingDirectory)/DecSm.Atom.Module.Dotnet"
      
      - task: DownloadPipelineArtifact@2
        displayName: DecSm.Atom.Module.GithubWorkflows
        inputs:
          artifact: DecSm.Atom.Module.GithubWorkflows
          path: "$(Build.ArtifactStagingDirectory)/DecSm.Atom.Module.GithubWorkflows"
      
      - task: DownloadPipelineArtifact@2
        displayName: DecSm.Atom.Module.GitVersion
        inputs:
          artifact: DecSm.Atom.Module.GitVersion
          path: "$(Build.ArtifactStagingDirectory)/DecSm.Atom.Module.GitVersion"
      
      - script: dotnet run --project _atom/_atom.csproj PushToNuget --skip --headless
        name: PushToNuget
        env:
          azure-vault-app-secret: $(AZURE_VAULT_APP_SECRET)
          azure-vault-address: $(AZURE_VAULT_ADDRESS)
          azure-vault-tenant-id: $(AZURE_VAULT_TENANT_ID)
          azure-vault-app-id: $(AZURE_VAULT_APP_ID)
          nuget-dry-run: true
