name: Test_BuildWithCustomArtifacts

variables:
  - group: Atom
trigger: none

jobs:
  
  - job: SetupBuildInfo
    pool:
      vmImage: ubuntu-latest
    steps:
      
      - checkout: self
        fetchDepth: 0
      
      - script: dotnet run --project _atom/_atom.csproj SetupBuildInfo --skip --headless
        name: SetupBuildInfo
        env:
          nuget-dry-run: true
  
  - job: PackAtom
    dependsOn: [ SetupBuildInfo ]
    pool:
      vmImage: ubuntu-latest
    variables:
      build-id: $[ dependencies.SetupBuildInfo.outputs['SetupBuildInfo.build-id'] ]
    steps:
      
      - checkout: self
        fetchDepth: 0
      
      - script: dotnet run --project _atom/_atom.csproj PackAtom --skip --headless
        name: PackAtom
        env:
          nuget-dry-run: true
      
      - script: dotnet run --project _atom/_atom.csproj StoreArtifact --skip --headless
        env:
          build-id: $(build-id)
          azure-vault-app-secret: $(AZURE_VAULT_APP_SECRET)
          azure-vault-address: $(AZURE_VAULT_ADDRESS)
          azure-vault-tenant-id: $(AZURE_VAULT_TENANT_ID)
          azure-vault-app-id: $(AZURE_VAULT_APP_ID)
          nuget-dry-run: true
          atom-artifacts: DecSm.Atom
  
  - job: PackAtomTool
    dependsOn: [ SetupBuildInfo ]
    pool:
      vmImage: ubuntu-latest
    variables:
      build-id: $[ dependencies.SetupBuildInfo.outputs['SetupBuildInfo.build-id'] ]
    steps:
      
      - checkout: self
        fetchDepth: 0
      
      - script: dotnet run --project _atom/_atom.csproj PackAtomTool --skip --headless
        name: PackAtomTool
        env:
          nuget-dry-run: true
      
      - script: dotnet run --project _atom/_atom.csproj StoreArtifact --skip --headless
        env:
          build-id: $(build-id)
          azure-vault-app-secret: $(AZURE_VAULT_APP_SECRET)
          azure-vault-address: $(AZURE_VAULT_ADDRESS)
          azure-vault-tenant-id: $(AZURE_VAULT_TENANT_ID)
          azure-vault-app-id: $(AZURE_VAULT_APP_ID)
          nuget-dry-run: true
          atom-artifacts: DecSm.Atom.Tool
  
  - job: PackAzureKeyVaultModule
    dependsOn: [ SetupBuildInfo ]
    pool:
      vmImage: ubuntu-latest
    variables:
      build-id: $[ dependencies.SetupBuildInfo.outputs['SetupBuildInfo.build-id'] ]
    steps:
      
      - checkout: self
        fetchDepth: 0
      
      - script: dotnet run --project _atom/_atom.csproj PackAzureKeyVaultModule --skip --headless
        name: PackAzureKeyVaultModule
        env:
          nuget-dry-run: true
      
      - script: dotnet run --project _atom/_atom.csproj StoreArtifact --skip --headless
        env:
          build-id: $(build-id)
          azure-vault-app-secret: $(AZURE_VAULT_APP_SECRET)
          azure-vault-address: $(AZURE_VAULT_ADDRESS)
          azure-vault-tenant-id: $(AZURE_VAULT_TENANT_ID)
          azure-vault-app-id: $(AZURE_VAULT_APP_ID)
          nuget-dry-run: true
          atom-artifacts: DecSm.Atom.Module.AzureKeyVault
  
  - job: PackAzureStorageModule
    dependsOn: [ SetupBuildInfo ]
    pool:
      vmImage: ubuntu-latest
    variables:
      build-id: $[ dependencies.SetupBuildInfo.outputs['SetupBuildInfo.build-id'] ]
    steps:
      
      - checkout: self
        fetchDepth: 0
      
      - script: dotnet run --project _atom/_atom.csproj PackAzureStorageModule --skip --headless
        name: PackAzureStorageModule
        env:
          nuget-dry-run: true
      
      - script: dotnet run --project _atom/_atom.csproj StoreArtifact --skip --headless
        env:
          build-id: $(build-id)
          azure-vault-app-secret: $(AZURE_VAULT_APP_SECRET)
          azure-vault-address: $(AZURE_VAULT_ADDRESS)
          azure-vault-tenant-id: $(AZURE_VAULT_TENANT_ID)
          azure-vault-app-id: $(AZURE_VAULT_APP_ID)
          nuget-dry-run: true
          atom-artifacts: DecSm.Atom.Module.AzureStorage
  
  - job: PackDevopsWorkflowsModule
    dependsOn: [ SetupBuildInfo ]
    pool:
      vmImage: ubuntu-latest
    variables:
      build-id: $[ dependencies.SetupBuildInfo.outputs['SetupBuildInfo.build-id'] ]
    steps:
      
      - checkout: self
        fetchDepth: 0
      
      - script: dotnet run --project _atom/_atom.csproj PackDevopsWorkflowsModule --skip --headless
        name: PackDevopsWorkflowsModule
        env:
          nuget-dry-run: true
      
      - script: dotnet run --project _atom/_atom.csproj StoreArtifact --skip --headless
        env:
          build-id: $(build-id)
          azure-vault-app-secret: $(AZURE_VAULT_APP_SECRET)
          azure-vault-address: $(AZURE_VAULT_ADDRESS)
          azure-vault-tenant-id: $(AZURE_VAULT_TENANT_ID)
          azure-vault-app-id: $(AZURE_VAULT_APP_ID)
          nuget-dry-run: true
          atom-artifacts: DecSm.Atom.Module.DevopsWorkflows
  
  - job: PackDotnetModule
    dependsOn: [ SetupBuildInfo ]
    pool:
      vmImage: ubuntu-latest
    variables:
      build-id: $[ dependencies.SetupBuildInfo.outputs['SetupBuildInfo.build-id'] ]
    steps:
      
      - checkout: self
        fetchDepth: 0
      
      - script: dotnet run --project _atom/_atom.csproj PackDotnetModule --skip --headless
        name: PackDotnetModule
        env:
          nuget-dry-run: true
      
      - script: dotnet run --project _atom/_atom.csproj StoreArtifact --skip --headless
        env:
          build-id: $(build-id)
          azure-vault-app-secret: $(AZURE_VAULT_APP_SECRET)
          azure-vault-address: $(AZURE_VAULT_ADDRESS)
          azure-vault-tenant-id: $(AZURE_VAULT_TENANT_ID)
          azure-vault-app-id: $(AZURE_VAULT_APP_ID)
          nuget-dry-run: true
          atom-artifacts: DecSm.Atom.Module.Dotnet
  
  - job: PackGithubWorkflowsModule
    dependsOn: [ SetupBuildInfo ]
    pool:
      vmImage: ubuntu-latest
    variables:
      build-id: $[ dependencies.SetupBuildInfo.outputs['SetupBuildInfo.build-id'] ]
    steps:
      
      - checkout: self
        fetchDepth: 0
      
      - script: dotnet run --project _atom/_atom.csproj PackGithubWorkflowsModule --skip --headless
        name: PackGithubWorkflowsModule
        env:
          nuget-dry-run: true
      
      - script: dotnet run --project _atom/_atom.csproj StoreArtifact --skip --headless
        env:
          build-id: $(build-id)
          azure-vault-app-secret: $(AZURE_VAULT_APP_SECRET)
          azure-vault-address: $(AZURE_VAULT_ADDRESS)
          azure-vault-tenant-id: $(AZURE_VAULT_TENANT_ID)
          azure-vault-app-id: $(AZURE_VAULT_APP_ID)
          nuget-dry-run: true
          atom-artifacts: DecSm.Atom.Module.GithubWorkflows
  
  - job: PackGitVersionModule
    dependsOn: [ SetupBuildInfo ]
    pool:
      vmImage: ubuntu-latest
    variables:
      build-id: $[ dependencies.SetupBuildInfo.outputs['SetupBuildInfo.build-id'] ]
    steps:
      
      - checkout: self
        fetchDepth: 0
      
      - script: dotnet run --project _atom/_atom.csproj PackGitVersionModule --skip --headless
        name: PackGitVersionModule
        env:
          nuget-dry-run: true
      
      - script: dotnet run --project _atom/_atom.csproj StoreArtifact --skip --headless
        env:
          build-id: $(build-id)
          azure-vault-app-secret: $(AZURE_VAULT_APP_SECRET)
          azure-vault-address: $(AZURE_VAULT_ADDRESS)
          azure-vault-tenant-id: $(AZURE_VAULT_TENANT_ID)
          azure-vault-app-id: $(AZURE_VAULT_APP_ID)
          nuget-dry-run: true
          atom-artifacts: DecSm.Atom.Module.GitVersion
  
  - job: TestAtom
    dependsOn: [ SetupBuildInfo ]
    strategy:
      matrix:
        001_windows-latest:
          job-runs-on: 'windows-latest'
        002_ubuntu-latest:
          job-runs-on: 'ubuntu-latest'
        003_macos-latest:
          job-runs-on: 'macos-latest'
    pool:
      vmImage: ubuntu-latest
    variables:
      build-id: $[ dependencies.SetupBuildInfo.outputs['SetupBuildInfo.build-id'] ]
    steps:
      
      - checkout: self
        fetchDepth: 0
      
      - script: dotnet run --project _atom/_atom.csproj TestAtom --skip --headless
        name: TestAtom
        env:
          nuget-dry-run: true
          job-runs-on: $(job-runs-on)
          build-slice: $(job-runs-on)
      
      - script: dotnet run --project _atom/_atom.csproj StoreArtifact --skip --headless
        env:
          build-id: $(build-id)
          azure-vault-app-secret: $(AZURE_VAULT_APP_SECRET)
          azure-vault-address: $(AZURE_VAULT_ADDRESS)
          azure-vault-tenant-id: $(AZURE_VAULT_TENANT_ID)
          azure-vault-app-id: $(AZURE_VAULT_APP_ID)
          nuget-dry-run: true
          atom-artifacts: DecSm.Atom.Tests,DecSm.Atom.SourceGenerators.Tests,DecSm.Atom.Module.GithubWorkflows.Tests
          build-slice: $(job-runs-on)
  
  - job: PushToNuget
    dependsOn: [ PackAtom, PackAtomTool, PackAzureKeyVaultModule, PackAzureStorageModule, PackDevopsWorkflowsModule, PackDotnetModule, PackGithubWorkflowsModule, PackGitVersionModule, SetupBuildInfo ]
    pool:
      vmImage: ubuntu-latest
    variables:
      build-id: $[ dependencies.SetupBuildInfo.outputs['SetupBuildInfo.build-id'] ]
    steps:
      
      - checkout: self
        fetchDepth: 0
      
      - script: dotnet run --project _atom/_atom.csproj RetrieveArtifact --skip --headless
        env:
          build-id: $(build-id)
          azure-vault-app-secret: $(AZURE_VAULT_APP_SECRET)
          azure-vault-address: $(AZURE_VAULT_ADDRESS)
          azure-vault-tenant-id: $(AZURE_VAULT_TENANT_ID)
          azure-vault-app-id: $(AZURE_VAULT_APP_ID)
          nuget-dry-run: true
          atom-artifacts: DecSm.Atom,DecSm.Atom.Tool,DecSm.Atom.Module.AzureKeyVault,DecSm.Atom.Module.AzureStorage,DecSm.Atom.Module.DevopsWorkflows,DecSm.Atom.Module.Dotnet,DecSm.Atom.Module.GithubWorkflows,DecSm.Atom.Module.GitVersion
      
      - script: dotnet run --project _atom/_atom.csproj PushToNuget --skip --headless
        name: PushToNuget
        env:
          azure-vault-app-secret: $(AZURE_VAULT_APP_SECRET)
          azure-vault-address: $(AZURE_VAULT_ADDRESS)
          azure-vault-tenant-id: $(AZURE_VAULT_TENANT_ID)
          azure-vault-app-id: $(AZURE_VAULT_APP_ID)
          nuget-dry-run: true
