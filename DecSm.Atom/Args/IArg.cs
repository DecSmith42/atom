namespace DecSm.Atom.Args;

/// <summary>
///     Defines a generic interface for a parsed command-line argument within the Atom framework.
/// </summary>
/// <remarks>
///     This interface serves as a base for all specific argument types that can be parsed from the command line.
///     Implementations of this interface represent the different kinds of inputs a user can provide to an Atom build,
///     such as commands to execute, parameters, or options that modify build behavior.
/// </remarks>
[PublicAPI]
public interface IArg;

/// <summary>
///     Represents a command argument, indicating a specific target to be executed in the Atom build.
/// </summary>
/// <remarks>
///     The <paramref name="Name" /> of this argument must correspond to a defined target within the
///     <see cref="DecSm.Atom.Build.Definition.IBuildDefinition" />.
///     The Atom framework's <see cref="CommandLineArgsParser" /> identifies these arguments to determine the build plan.
/// </remarks>
/// <param name="Name">The name of the build target to execute. This is case-insensitive.</param>
/// <example>
///     If the command line is `atom MyTarget`, a <see cref="CommandArg" /> with `Name = "MyTarget"` will be created.
///     <code>
/// // Command: atom Build
/// </code>
/// </example>
[PublicAPI]
public sealed record CommandArg(string Name) : IArg;

/// <summary>
///     Represents an argument that instructs the Atom build system to generate or regenerate all associated workflow files.
/// </summary>
/// <remarks>
///     This is typically used when changes to the build definition or workflow configurations require updating CI/CD pipeline files
///     (e.g., GitHub Actions YAML files, Azure DevOps YAML files) managed by the Atom framework.
///     It is often triggered by a `--gen` or `--generate` flag on the command line.
/// </remarks>
/// <example>
///     <code>
/// // Command: atom --gen
/// </code>
/// </example>
[PublicAPI]
public sealed record GenArg : IArg;

/// <summary>
///     Represents an argument that requests the display of help information for the Atom build.
/// </summary>
/// <remarks>
///     When this argument is present, the Atom framework typically shows available commands, options, and parameters.
///     It is often triggered by a `-h` or `--help` flag on the command line.
///     The help information is generated by the <see cref="DecSm.Atom.Help.HelpService" />.
/// </remarks>
/// <example>
///     <code>
/// // Command: atom --help
/// </code>
/// </example>
[PublicAPI]
public sealed record HelpArg : IArg;

/// <summary>
///     Represents a parameter argument passed to the Atom build, consisting of an argument name, a parameter name, and its value.
/// </summary>
/// <remarks>
///     Parameters are used to provide configurable values to build targets. The <paramref name="ParamName" /> should match
///     a parameter defined in the <see cref="DecSm.Atom.Build.Definition.IBuildDefinition" />.
///     The <paramref name="ArgName" /> is how the parameter was specified on the command line (e.g. `--my-param-name`).
///     The Atom framework's <see cref="CommandLineArgsParser" /> resolves these arguments and makes their values available to targets.
/// </remarks>
/// <param name="ArgName">The name of the argument as specified on the command line (e.g., "--version", "-c").</param>
/// <param name="ParamName">The canonical name of the parameter as defined in the build definition (e.g., "Version", "Configuration").</param>
/// <param name="ParamValue">The value provided for the parameter.</param>
/// <example>
///     If the command line is `atom Build --configuration Release`, a <see cref="ParamArg" /> might be:
///     `new ParamArg("--configuration", "Configuration", "Release")`.
///     <code>
/// // Command: atom Build --custom-value 123
/// </code>
/// </example>
[PublicAPI]
public sealed record ParamArg(string ArgName, string ParamName, string ParamValue) : IArg;

/// <summary>
///     Represents an argument that instructs the Atom build system to skip the execution of dependent targets.
/// </summary>
/// <remarks>
///     When this argument is present, only the explicitly specified targets will run; their declared dependencies will be ignored.
///     This is useful for scenarios where a user wants to run a specific part of the build without triggering its prerequisites.
///     It is often triggered by a `-s` or `--skip` flag on the command line.
/// </remarks>
/// <example>
///     <code>
/// // Command: atom Deploy -s
/// </code>
/// </example>
[PublicAPI]
public sealed record SkipArg : IArg;

/// <summary>
///     Represents an argument that instructs the Atom build to run in headless mode.
/// </summary>
/// <remarks>
///     Headless mode is typically used for non-interactive environments like CI (Continuous Integration) servers.
///     In this mode, the build might suppress interactive prompts or alter logging behavior.
///     It is often triggered by a `--headless` flag on the command line.
/// </remarks>
/// <example>
///     <code>
/// // Command: atom Build --headless
/// </code>
/// </example>
[PublicAPI]
public sealed record HeadlessArg : IArg;

/// <summary>
///     Represents an argument that instructs the Atom build to run in verbose mode.
/// </summary>
/// <remarks>
///     Verbose mode results in more detailed logging output from the build process. This can be useful for
///     debugging build issues or for a more thorough understanding of the build execution steps.
///     It is often triggered by a `-v` or `--verbose` flag on the command line.
/// </remarks>
/// <example>
///     <code>
/// // Command: atom Test --verbose
/// </code>
/// </example>
[PublicAPI]
public sealed record VerboseArg : IArg;

/// <summary>
///     Represents an argument that specifies the project name for the Atom build.
/// </summary>
/// <remarks>
///     The Atom framework can manage build logic for different projects. This argument allows the user to
///     select which project's build definition to use. If not specified, the Atom build defaults to using
///     the project named '_atom'.
///     It is often triggered by a `-p &lt;ProjectName&gt;` or `--project &lt;ProjectName&gt;` flag on the command line.
/// </remarks>
/// <param name="ProjectName">The name of the project context for the build.</param>
/// <example>
///     <code>
/// // Command: atom Build -p MyAwesomeProject
/// </code>
/// </example>
[PublicAPI]
public sealed record ProjectArg(string ProjectName) : IArg;

/// <summary>
///     Represents an argument that instructs the Atom build to run in interactive mode.
/// </summary>
/// <remarks>
///     Interactive mode allows the build process to prompt the user for input if needed by certain targets or configurations.
///     This is the default mode if `--headless` is not specified. It can be explicitly requested using an `--interactive` flag.
///     This mode is particularly useful for local development builds where user intervention might be required.
/// </remarks>
/// <example>
///     <code>
/// // Command: atom Configure --interactive
/// </code>
/// </example>
[PublicAPI]
public sealed record InteractiveArg : IArg;
