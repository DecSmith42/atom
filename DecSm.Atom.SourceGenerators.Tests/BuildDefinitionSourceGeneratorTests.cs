namespace DecSm.Atom.SourceGenerators.Tests;

[TestFixture]
public class BuildDefinitionSourceGeneratorTests
{
    [Test]
    public void EmptyDefinition_GeneratesDefaultSource()
    {
        // Arrange
        const string source = """
                              using DecSm.Atom.Build.Definition;

                              namespace TestNamespace;

                              [BuildDefinition]
                              public partial class TestBuildDefinition : BuildDefinition;
                              """;

        var expectedGenerated = """
                                // <auto-generated/>

                                #nullable enable

                                global using static TestNamespace.TestBuildDefinition;
                                using Microsoft.Extensions.DependencyInjection;

                                namespace TestNamespace;

                                [JetBrains.Annotations.PublicAPI]
                                partial class TestBuildDefinition
                                {
                                    private System.Collections.Generic.IReadOnlyDictionary<string, DecSm.Atom.Build.Definition.Target>? _targetDefinitions;
                                    private System.Collections.Generic.IReadOnlyDictionary<string, DecSm.Atom.Params.ParamDefinition>? _paramDefinitions;
                                
                                    public TestBuildDefinition(System.IServiceProvider services) : base(services) { }
                                
                                    public override System.Collections.Generic.IReadOnlyDictionary<string, DecSm.Atom.Build.Definition.Target> TargetDefinitions => _targetDefinitions ??= new System.Collections.Generic.Dictionary<string, DecSm.Atom.Build.Definition.Target>
                                    {
                                        { "Setup", ((DecSm.Atom.ISetup)this).Setup },
                                        { "ValidateBuild", ((DecSm.Atom.IValidateBuild)this).ValidateBuild },
                                    };
                                
                                    public override System.Collections.Generic.IReadOnlyDictionary<string, DecSm.Atom.Params.ParamDefinition> ParamDefinitions => _paramDefinitions ??= new System.Collections.Generic.Dictionary<string, DecSm.Atom.Params.ParamDefinition>
                                    {
                                        { "AtomBuildId", new("AtomBuildId", new DecSm.Atom.Params.ParamDefinitionAttribute("atom-build-id", "Build/run ID", null, (DecSm.Atom.Params.ParamSource)63)) },
                                        { "AtomBuildVersion", new("AtomBuildVersion", new DecSm.Atom.Params.ParamDefinitionAttribute("atom-build-version", "Build version", null, (DecSm.Atom.Params.ParamSource)63)) },
                                        { "AtomBuildName", new("AtomBuildName", new DecSm.Atom.Params.ParamDefinitionAttribute("atom-build-name", "Name of the build", "Solution name if provided, otherwise the root directory name", (DecSm.Atom.Params.ParamSource)63)) },
                                        { "MatrixSlice", new("MatrixSlice", new DecSm.Atom.Params.ParamDefinitionAttribute("matrix-slice", "Unique identifier for the combination of matrix parameters for this job", null, (DecSm.Atom.Params.ParamSource)63)) },
                                    };
                                
                                    public static class Commands
                                    {
                                        public static DecSm.Atom.Workflows.Definition.Command.CommandDefinition Setup = new("Setup");
                                
                                        public static DecSm.Atom.Workflows.Definition.Command.CommandDefinition ValidateBuild = new("ValidateBuild");
                                    }
                                
                                    public static class Params
                                    {
                                        public static string AtomBuildId = "AtomBuildId";
                                
                                        public static string AtomBuildVersion = "AtomBuildVersion";
                                
                                        public static string AtomBuildName = "AtomBuildName";
                                
                                        public static string MatrixSlice = "MatrixSlice";
                                    }
                                
                                    static void DecSm.Atom.Build.Definition.IBuildDefinition.Register(Microsoft.Extensions.DependencyInjection.IServiceCollection services)
                                    {
                                        Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<DecSm.Atom.ISetup>(services, static p => (DecSm.Atom.ISetup)p.GetRequiredService<DecSm.Atom.Build.Definition.IBuildDefinition>());
                                
                                        Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<DecSm.Atom.IValidateBuild>(services, static p => (DecSm.Atom.IValidateBuild)p.GetRequiredService<DecSm.Atom.Build.Definition.IBuildDefinition>());
                                    }
                                
                                    private static void RegisterTarget<T>(Microsoft.Extensions.DependencyInjection.IServiceCollection services)
                                        where T : DecSm.Atom.Build.Definition.IBuildDefinition =>
                                        T.Register(services);
                                }

                                """.Replace("\r\n", "\n");

        // Act
        var generatedText = TestUtils.GetGeneratedSource<BuildDefinitionSourceGenerator>(source, typeof(BuildDefinition).Assembly);

        // Assert
        TestContext.Out.Write(generatedText);
        generatedText.ShouldBe(expectedGenerated);
    }
}
