// <auto-generated/>

#nullable enable

global using static TestNamespace.MinimalTestDefinition;
using Microsoft.Extensions.DependencyInjection;

namespace TestNamespace;

[JetBrains.Annotations.PublicAPI]
partial class MinimalTestDefinition
{
    private System.Collections.Generic.IReadOnlyDictionary<string, DecSm.Atom.Build.Definition.Target>? _targetDefinitions;
    private System.Collections.Generic.IReadOnlyDictionary<string, DecSm.Atom.Params.ParamDefinition>? _paramDefinitions;

    public MinimalTestDefinition(System.IServiceProvider services) : base(services) { }

    public override System.Collections.Generic.IReadOnlyDictionary<string, DecSm.Atom.Build.Definition.Target> TargetDefinitions => _targetDefinitions ??= new System.Collections.Generic.Dictionary<string, DecSm.Atom.Build.Definition.Target>
    {

    };

    public override System.Collections.Generic.IReadOnlyDictionary<string, DecSm.Atom.Params.ParamDefinition> ParamDefinitions => _paramDefinitions ??= new System.Collections.Generic.Dictionary<string, DecSm.Atom.Params.ParamDefinition>
    {
        { "AtomBuildName", new("AtomBuildName", new DecSm.Atom.Params.ParamDefinitionAttribute("atom-build-name", "Name of the build", "Solution name if provided, otherwise the root directory name", (DecSm.Atom.Params.ParamSource)63)) },
        { "MatrixSlice", new("MatrixSlice", new DecSm.Atom.Params.ParamDefinitionAttribute("matrix-slice", "Unique identifier for the combination of matrix parameters for this job", null, (DecSm.Atom.Params.ParamSource)63)) },
    };

    public static class Commands
    {

    }

    public static class Params
    {
        public static string AtomBuildName = "AtomBuildName";

        public static string MatrixSlice = "MatrixSlice";
    }

    static void DecSm.Atom.Build.Definition.IBuildDefinition.Register(Microsoft.Extensions.DependencyInjection.IServiceCollection services)
    {

    }

    private static void RegisterTarget<T>(Microsoft.Extensions.DependencyInjection.IServiceCollection services)
        where T : DecSm.Atom.Build.Definition.IBuildDefinition =>
        T.Register(services);
}
