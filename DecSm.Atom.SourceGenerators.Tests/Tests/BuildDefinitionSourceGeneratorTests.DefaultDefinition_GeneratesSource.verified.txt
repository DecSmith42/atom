// <auto-generated/>

#nullable enable

global using static TestNamespace.DefaultTestDefinition;
using Microsoft.Extensions.DependencyInjection;

namespace TestNamespace;

[JetBrains.Annotations.PublicAPI]
partial class DefaultTestDefinition
{
    private System.Collections.Generic.IReadOnlyDictionary<string, DecSm.Atom.Build.Definition.Target>? _targetDefinitions;
    private System.Collections.Generic.IReadOnlyDictionary<string, DecSm.Atom.Params.ParamDefinition>? _paramDefinitions;

    public DefaultTestDefinition(System.IServiceProvider services) : base(services) { }

    public override System.Collections.Generic.IReadOnlyDictionary<string, DecSm.Atom.Build.Definition.Target> TargetDefinitions => _targetDefinitions ??= new System.Collections.Generic.Dictionary<string, DecSm.Atom.Build.Definition.Target>
    {
        { "SetupBuildInfo", ((DecSm.Atom.ISetupBuildInfo)this).SetupBuildInfo },
        { "ValidateBuild", ((DecSm.Atom.IValidateBuild)this).ValidateBuild },
    };

    public override System.Collections.Generic.IReadOnlyDictionary<string, DecSm.Atom.Params.ParamDefinition> ParamDefinitions => _paramDefinitions ??= new System.Collections.Generic.Dictionary<string, DecSm.Atom.Params.ParamDefinition>
    {
        { "AtomBuildId", new("AtomBuildId", new DecSm.Atom.Params.ParamDefinitionAttribute("atom-build-id", "Build/run ID", null, (DecSm.Atom.Params.ParamSource)47)) },
        { "AtomBuildVersion", new("AtomBuildVersion", new DecSm.Atom.Params.ParamDefinitionAttribute("atom-build-version", "Build version", null, (DecSm.Atom.Params.ParamSource)47)) },
        { "AtomBuildName", new("AtomBuildName", new DecSm.Atom.Params.ParamDefinitionAttribute("atom-build-name", "Name of the build", "Solution name if provided, otherwise the root directory name", (DecSm.Atom.Params.ParamSource)47)) },
        { "MatrixSlice", new("MatrixSlice", new DecSm.Atom.Params.ParamDefinitionAttribute("matrix-slice", "Unique identifier for the combination of matrix parameters for this job", null, (DecSm.Atom.Params.ParamSource)47)) },
    };

    public static class Commands
    {
        public static DecSm.Atom.Workflows.Definition.Command.CommandDefinition SetupBuildInfo = new("SetupBuildInfo");

        public static DecSm.Atom.Workflows.Definition.Command.CommandDefinition ValidateBuild = new("ValidateBuild");
    }

    public static class Params
    {
        public static string AtomBuildId = "AtomBuildId";

        public static string AtomBuildVersion = "AtomBuildVersion";

        public static string AtomBuildName = "AtomBuildName";

        public static string MatrixSlice = "MatrixSlice";
    }

    static void DecSm.Atom.Build.Definition.IBuildDefinition.Register(Microsoft.Extensions.DependencyInjection.IServiceCollection services)
    {
        Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<DecSm.Atom.ISetupBuildInfo>(services, static p => (DecSm.Atom.ISetupBuildInfo)p.GetRequiredService<DecSm.Atom.Build.Definition.IBuildDefinition>());

        Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<DecSm.Atom.IValidateBuild>(services, static p => (DecSm.Atom.IValidateBuild)p.GetRequiredService<DecSm.Atom.Build.Definition.IBuildDefinition>());

        Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<DecSm.Atom.Vaults.IUserSecretsVault>(services, static p => (DecSm.Atom.Vaults.IUserSecretsVault)p.GetRequiredService<DecSm.Atom.Build.Definition.IBuildDefinition>());
        RegisterTarget<DecSm.Atom.Vaults.IUserSecretsVault>(services);
    }

    private static void RegisterTarget<T>(Microsoft.Extensions.DependencyInjection.IServiceCollection services)
        where T : DecSm.Atom.Build.Definition.IBuildDefinition =>
        T.Register(services);
}
