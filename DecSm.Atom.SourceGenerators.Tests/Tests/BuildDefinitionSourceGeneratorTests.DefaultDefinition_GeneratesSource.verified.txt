// <auto-generated/>

#nullable enable

global using static TestNamespace.DefaultTestDefinition;
using Microsoft.Extensions.DependencyInjection;

namespace TestNamespace;

[JetBrains.Annotations.PublicAPI]
partial class DefaultTestDefinition
{
    private System.Collections.Generic.IReadOnlyDictionary<string, DecSm.Atom.Build.Definition.Target>? _targetDefinitions;
    private System.Collections.Generic.IReadOnlyDictionary<string, DecSm.Atom.Params.ParamDefinition>? _paramDefinitions;

    public DefaultTestDefinition(System.IServiceProvider services) : base(services) { }

    public override System.Collections.Generic.IReadOnlyDictionary<string, DecSm.Atom.Build.Definition.Target> TargetDefinitions => _targetDefinitions ??= new System.Collections.Generic.Dictionary<string, DecSm.Atom.Build.Definition.Target>
    {
        { "SetupBuildInfo", ((DecSm.Atom.ISetupBuildInfo)this).SetupBuildInfo },
        { "ValidateBuild", ((DecSm.Atom.IValidateBuild)this).ValidateBuild },
    };

    public override System.Collections.Generic.IReadOnlyDictionary<string, DecSm.Atom.Params.ParamDefinition> ParamDefinitions => _paramDefinitions ??= new System.Collections.Generic.Dictionary<string, DecSm.Atom.Params.ParamDefinition>
    {
        { "BuildId", new("BuildId", new DecSm.Atom.Params.ParamDefinitionAttribute("build-id", "Build/run ID", "{From IBuildIdProvider}", (DecSm.Atom.Params.ParamSource)47)) },
        { "BuildVersion", new("BuildVersion", new DecSm.Atom.Params.ParamDefinitionAttribute("build-version", "Build version", "{From IBuildVersionProvider}", (DecSm.Atom.Params.ParamSource)47)) },
        { "BuildTimestamp", new("BuildTimestamp", new DecSm.Atom.Params.ParamDefinitionAttribute("build-timestamp", "Build timestamp (seconds since unix epoch)", "{From IBuildTimestampProvider}", (DecSm.Atom.Params.ParamSource)47)) },
        { "AtomBuildName", new("AtomBuildName", new DecSm.Atom.Params.ParamDefinitionAttribute("build-name", "Name of the build", "{Solution name if provided, otherwise the root directory name}", (DecSm.Atom.Params.ParamSource)47)) },
        { "BuildSlice", new("BuildSlice", new DecSm.Atom.Params.ParamDefinitionAttribute("build-slice", "Unique identifier for a variation of the build, commonly used for CI/CD matrix jobs", null, (DecSm.Atom.Params.ParamSource)47)) },
    };

    public static class Commands
    {
        public static DecSm.Atom.Workflows.Definition.Command.CommandDefinition SetupBuildInfo = new("SetupBuildInfo");

        public static DecSm.Atom.Workflows.Definition.Command.CommandDefinition ValidateBuild = new("ValidateBuild");
    }

    public static class Params
    {
        public static string BuildId = "BuildId";

        public static string BuildVersion = "BuildVersion";

        public static string BuildTimestamp = "BuildTimestamp";

        public static string AtomBuildName = "AtomBuildName";

        public static string BuildSlice = "BuildSlice";
    }

    static void DecSm.Atom.Build.Definition.IBuildDefinition.Register(Microsoft.Extensions.DependencyInjection.IServiceCollection services)
    {
        Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<DecSm.Atom.ISetupBuildInfo>(services, static p => (DecSm.Atom.ISetupBuildInfo)p.GetRequiredService<DecSm.Atom.Build.Definition.IBuildDefinition>());

        Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<DecSm.Atom.IBuildInfo>(services, static p => (DecSm.Atom.IBuildInfo)p.GetRequiredService<DecSm.Atom.Build.Definition.IBuildDefinition>());

        Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<DecSm.Atom.IValidateBuild>(services, static p => (DecSm.Atom.IValidateBuild)p.GetRequiredService<DecSm.Atom.Build.Definition.IBuildDefinition>());

        Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<DecSm.Atom.Vaults.IUserSecretsVault>(services, static p => (DecSm.Atom.Vaults.IUserSecretsVault)p.GetRequiredService<DecSm.Atom.Build.Definition.IBuildDefinition>());
        RegisterTarget<DecSm.Atom.Vaults.IUserSecretsVault>(services);
    }

    private static void RegisterTarget<T>(Microsoft.Extensions.DependencyInjection.IServiceCollection services)
        where T : DecSm.Atom.Build.Definition.IBuildDefinition =>
        T.Register(services);
}
