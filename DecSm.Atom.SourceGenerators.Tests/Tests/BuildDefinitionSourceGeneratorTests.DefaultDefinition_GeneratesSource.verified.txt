// <auto-generated/>

#nullable enable

global using static TestNamespace.DefaultTestDefinition;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using DecSm.Atom.Build.Definition;
using DecSm.Atom.Params;
using DecSm.Atom.Paths;

namespace TestNamespace;

[JetBrains.Annotations.PublicAPI]
partial class DefaultTestDefinition : DecSm.Atom.Build.Definition.IBuildDefinition, DecSm.Atom.Hosting.IConfigureHost
{
    private System.Collections.Generic.IReadOnlyDictionary<string, DecSm.Atom.Build.Definition.Target>? _targetDefinitions;

    public DefaultTestDefinition(System.IServiceProvider services) : base(services) { }

    private ILogger Logger => Services.GetRequiredService<ILoggerFactory>().CreateLogger("TestNamespace.DefaultTestDefinition");

    private IAtomFileSystem FileSystem => GetService<IAtomFileSystem>();

    private T GetService<T>()
        where T : notnull =>
        typeof(T).GetInterface(nameof(IBuildDefinition)) != null
            ? (T)(IBuildDefinition)this
            : Services.GetRequiredService<T>();

   private IEnumerable<T> GetServices<T>()
        where T : notnull =>
        typeof(T).GetInterface(nameof(IBuildDefinition)) != null
            ? [(T)(IBuildDefinition)this]
            : Services.GetServices<T>();

    [return: NotNullIfNotNull(nameof(defaultValue))]
    private T? GetParam<T>(Expression<Func<T?>> parameterExpression, T? defaultValue = default, Func<string?, T?>? converter = null) =>
        Services
            .GetRequiredService<IParamService>()
            .GetParam(parameterExpression, defaultValue, converter);


    public override System.Collections.Generic.IReadOnlyDictionary<string, DecSm.Atom.Build.Definition.Target> TargetDefinitions => _targetDefinitions ??= new System.Collections.Generic.Dictionary<string, DecSm.Atom.Build.Definition.Target>
    {
        { "SetupBuildInfo", ((DecSm.Atom.ISetupBuildInfo)this).SetupBuildInfo },
        { "ValidateBuild", ((DecSm.Atom.IValidateBuild)this).ValidateBuild },
    };

    public override System.Collections.Generic.IReadOnlyDictionary<string, DecSm.Atom.Params.ParamDefinition> ParamDefinitions { get; } = new System.Collections.Generic.Dictionary<string, DecSm.Atom.Params.ParamDefinition>
    {
        {
            "BuildName", new("BuildName")
            {
                ArgName = "build-name",
                Description = "Name of the build",
                DefaultValue = "{Solution name if provided, otherwise the root directory name}",
                Sources = (DecSm.Atom.Params.ParamSource)47,
                IsSecret = false,
            }
        },
        {
            "BuildId", new("BuildId")
            {
                ArgName = "build-id",
                Description = "Build/run ID",
                DefaultValue = "{From IBuildIdProvider}",
                Sources = (DecSm.Atom.Params.ParamSource)47,
                IsSecret = false,
            }
        },
        {
            "BuildVersion", new("BuildVersion")
            {
                ArgName = "build-version",
                Description = "Build version",
                DefaultValue = "{From IBuildVersionProvider}",
                Sources = (DecSm.Atom.Params.ParamSource)47,
                IsSecret = false,
            }
        },
        {
            "BuildTimestamp", new("BuildTimestamp")
            {
                ArgName = "build-timestamp",
                Description = "Build timestamp (seconds since unix epoch)",
                DefaultValue = "{From IBuildTimestampProvider}",
                Sources = (DecSm.Atom.Params.ParamSource)47,
                IsSecret = false,
            }
        },
        {
            "BuildSlice", new("BuildSlice")
            {
                ArgName = "build-slice",
                Description = "Unique identifier for a variation of the build, commonly used for CI/CD matrix jobs",
                DefaultValue = null,
                Sources = (DecSm.Atom.Params.ParamSource)47,
                IsSecret = false,
            }
        },
    };

    [JetBrains.Annotations.PublicAPI]
    private static class Targets
    {
        public static DecSm.Atom.Workflows.Definition.WorkflowTargetDefinition SetupBuildInfo = new("SetupBuildInfo");
        public static DecSm.Atom.Workflows.Definition.WorkflowTargetDefinition ValidateBuild = new("ValidateBuild");
    }

    private static DecSm.Atom.Workflows.Definition.WorkflowTargetDefinition Target(string name) => name switch
    {
        "SetupBuildInfo" => Targets.SetupBuildInfo,
        "ValidateBuild" => Targets.ValidateBuild,
        _ => throw new System.ArgumentException($"Target with name '{name}' is not defined in the build definition.", nameof(name)),
    };

    [JetBrains.Annotations.PublicAPI]
    private static class Params
    {
        public static string BuildName = "BuildName";
        public static string BuildId = "BuildId";
        public static string BuildVersion = "BuildVersion";
        public static string BuildTimestamp = "BuildTimestamp";
        public static string BuildSlice = "BuildSlice";
    }

    public void ConfigureBuildHostBuilder(Microsoft.Extensions.Hosting.IHostApplicationBuilder builder)
    {
        DecSm.Atom.Secrets.IDotnetUserSecrets.ConfigureBuilder(builder);
    }

    public void ConfigureBuildHost(Microsoft.Extensions.Hosting.IHost builder)
    {

    }
}
